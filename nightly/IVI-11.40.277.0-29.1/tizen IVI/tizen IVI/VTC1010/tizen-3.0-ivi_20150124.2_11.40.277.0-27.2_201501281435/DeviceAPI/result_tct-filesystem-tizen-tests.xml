<?xml version="1.0" encoding="UTF-8"?>
        <?xml-stylesheet type="text/xsl" href="testresult.xsl"?>
<test_definition><environment build_id="" device_id="10.239.52.31:26101" device_model="" device_name="ivi_box&#10;" host="Linux-3.2.0-29-generic-pae-i686-with-Ubuntu-12.04-precise" lite_version="3.1.13" manufacturer="" resolution="" screen_size=""><other /></environment>
<summary test_plan_name="Empty test_plan_name"><start_at>2015-01-28_22_32_17</start_at><end_at>2015-01-28_22_35_13</end_at></summary>
  <suite category="Tizen Web Device APIs" extension="crosswalk" name="tct-filesystem-tizen-tests">
    <set name="Filesystem" set_debug_msg="N/A" type="js">
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileArraySuccessCallback_notexist" purpose="Interface FileArraySuccessCallback should not be accessible" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileArraySuccessCallback_notexist.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:37:23</start><end>2015-01-28 14:37:23</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileArraySuccessCallback_onsuccess" purpose="Test whether FileArraySuccessCallback::onsuccess is called with valid argument" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileArraySuccessCallback_onsuccess.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:37:23</start><end>2015-01-28 14:37:24</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileStreamSuccessCallback_notexist" purpose="Interface FileStreamSuccessCallback should not be accessible" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileStreamSuccessCallback_notexist.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:37:24</start><end>2015-01-28 14:37:24</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileStreamSuccessCallback_onsuccess" purpose="Test whether FileStreamSuccessCallback::onsuccess is called with argument of proper type" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileStreamSuccessCallback_onsuccess.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:37:24</start><end>2015-01-28 14:37:25</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileStream_bytesAvailable_attribute" purpose="Check if FileStream::bytesAvailable attribute exist, is of proper type" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileStream_bytesAvailable_attribute.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:37:25</start><end>2015-01-28 14:37:25</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileStream_close" purpose="Check if FileStream::close() method works" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileStream_close.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:37:25</start><end>2015-01-28 14:37:26</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileStream_close_exist" purpose="Check if FileStream::close() method exists" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileStream_close_exist.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:37:26</start><end>2015-01-28 14:37:27</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileStream_close_extra_argument" purpose="Check if FileStream::close() method can be called with extra arguments" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileStream_close_extra_argument.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:37:27</start><end>2015-01-28 14:37:27</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileStream_eof_attribute" purpose="Check if FileStream::eof attribute exists, is Boolean" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileStream_eof_attribute.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:37:27</start><end>2015-01-28 14:37:28</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileStream_extend" purpose="Test whether instance of FileStream can be extended with new attribute" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileStream_extend.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:37:28</start><end>2015-01-28 14:37:29</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileStream_notexist" purpose="Interface FileStream should not be accessible" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileStream_notexist.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:37:29</start><end>2015-01-28 14:37:29</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileStream_position_attribute" purpose="Check if FileStream::position attribute exists, is of proper type, can be changed" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileStream_position_attribute.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:37:29</start><end>2015-01-28 14:37:30</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileStream_read" purpose="Check if FileStream::read() method works properly" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileStream_read.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:37:30</start><end>2015-01-28 14:37:30</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileStream_readBase64" purpose="Check if FileStream::readBase64() method works" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileStream_readBase64.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:37:31</start><end>2015-01-28 14:37:31</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileStream_readBase64_exist" purpose="Check if FileStream::readBase64() method exists" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileStream_readBase64_exist.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:37:31</start><end>2015-01-28 14:37:32</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileStream_readBase64_without_r_permission" purpose="Check if FileStream::readBase64() throws exception when reading from a file opened in 'w' mode" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileStream_readBase64_without_r_permission.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:37:32</start><end>2015-01-28 14:37:32</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileStream_readBase64_writeFile" purpose="Check if you can create a new file, write content to it, and then read the content of the file as base64" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileStream_readBase64_writeFile.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:37:32</start><end>2015-01-28 14:37:33</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileStream_readBytes" purpose="Check if FileStream::readBytes() method works properly" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileStream_readBytes.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:37:33</start><end>2015-01-28 14:37:34</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileStream_readBytes_exist" purpose="Check if FileStream::readBytes() method exists" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileStream_readBytes_exist.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:37:34</start><end>2015-01-28 14:37:34</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileStream_readBytes_without_r_permission" purpose="Check if FileStream::readBytes() throws exception when reading from a file opened in 'w' mode" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileStream_readBytes_without_r_permission.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:37:34</start><end>2015-01-28 14:37:35</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileStream_readBytes_writeFile" purpose="Check if you can create a new file, write content to it, and then read the content of the file as a byte array" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileStream_readBytes_writeFile.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:37:35</start><end>2015-01-28 14:37:36</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileStream_read_exist" purpose="Check if FileStream::read() method exists" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileStream_read_exist.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:37:36</start><end>2015-01-28 14:37:36</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileStream_read_without_r_permission" purpose="Check if FileStream::read() throws exception when reading from a file opened in 'w' mode" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileStream_read_without_r_permission.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:37:36</start><end>2015-01-28 14:37:37</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileStream_read_writeFile" purpose="Check if you can create a new file, write content to it, and then read the content of the file" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileStream_read_writeFile.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:37:37</start><end>2015-01-28 14:37:38</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileStream_write" purpose="Check if FileStream::write() method works properly" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileStream_write.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:37:38</start><end>2015-01-28 14:37:38</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileStream_writeBase64" purpose="Check if FileStream::writeBase64() method works properly" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileStream_writeBase64.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:37:38</start><end>2015-01-28 14:37:39</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileStream_writeBase64_exist" purpose="Check if FileStream::writeBase64() method exists" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileStream_writeBase64_exist.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:37:39</start><end>2015-01-28 14:37:40</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileStream_writeBase64_without_w_permission" purpose="Check if FileStream::writeBase64() throws exception when writing to a file opened in 'r' mode" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileStream_writeBase64_without_w_permission.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:37:40</start><end>2015-01-28 14:37:40</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileStream_writeBytes" purpose="Check if FileStream::writeBytes() method works properly" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileStream_writeBytes.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:37:40</start><end>2015-01-28 14:37:41</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileStream_writeBytes_byteData_TypeMismatch" purpose="Check if FileStream::writeBytes() throws exception for wrong type of byteData" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileStream_writeBytes_byteData_TypeMismatch.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:37:41</start><end>2015-01-28 14:37:42</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileStream_writeBytes_exist" purpose="Check if FileStream::writeBytes() method exists" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileStream_writeBytes_exist.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:37:42</start><end>2015-01-28 14:37:42</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileStream_writeBytes_missarg" purpose="Check if FileStream::writeBytes() method throws exception for missing mandatory argument" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileStream_writeBytes_missarg.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:37:42</start><end>2015-01-28 14:37:43</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileStream_writeBytes_with_additional_null_parameter" purpose="Check if FileStream::writeBytes() method properly writes the specified bytes to file" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileStream_writeBytes_with_additional_null_parameter.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:37:43</start><end>2015-01-28 14:37:44</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileStream_writeBytes_without_w_permission" purpose="Check if FileStream::writeBytes() throws exception when writing to a file opened in 'r' mode" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileStream_writeBytes_without_w_permission.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:37:44</start><end>2015-01-28 14:37:44</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileStream_write_exist" purpose="Check if FileStream::write() method exists" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileStream_write_exist.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:37:44</start><end>2015-01-28 14:37:45</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileStream_write_without_w_permission" purpose="Check if FileStream::write() throws exception when writing to a file opened in 'r' mode" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileStream_write_without_w_permission.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:37:45</start><end>2015-01-28 14:37:45</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileStringSuccessCallback_notexist" purpose="Interface FileStringSuccessCallback should not be accessible" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileStringSuccessCallback_notexist.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:37:46</start><end>2015-01-28 14:37:46</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileStringSuccessCallback_onsuccess" purpose="Test whether FileStringSuccessCallback::onsuccess is called with valid argument" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileStringSuccessCallback_onsuccess.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:37:46</start><end>2015-01-28 14:37:46</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileSuccessCallback_notexist" purpose="Interface FileSuccessCallback should not be accessible" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileSuccessCallback_notexist.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:37:46</start><end>2015-01-28 14:37:47</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileSuccessCallback_onsuccess" purpose="Test whether FileSuccessCallback::onsuccess is called with valid argument" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileSuccessCallback_onsuccess.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:37:47</start><end>2015-01-28 14:37:47</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileSystemManagerObject_notexist" purpose="Interface FileSystemManagerObject should not be accessible" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileSystemManagerObject_notexist.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:37:47</start><end>2015-01-28 14:37:47</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileSystemManager_addStorageStateChangeListener" purpose="Check if FileSystemManager::addStorageStateChangeListener() method can be called" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileSystemManager_addStorageStateChangeListener.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:37:47</start><end>2015-01-28 14:37:48</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileSystemManager_addStorageStateChangeListener_exist" purpose="Check if FileSystemManager::addStorageStateChangeListener() method exists" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileSystemManager_addStorageStateChangeListener_exist.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:37:48</start><end>2015-01-28 14:37:48</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileSystemManager_addStorageStateChangeListener_missarg" purpose="Check if FileSystemManager::addStorageStateChangeListener() method throws exception for missing mandatory argument" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileSystemManager_addStorageStateChangeListener_missarg.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:37:48</start><end>2015-01-28 14:37:48</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileSystemManager_addStorageStateChangeListener_onerror_TypeMismatch" purpose="Check if FileSystemManager::addStorageStateChangeListener() throws exception for wrong type of onerror" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileSystemManager_addStorageStateChangeListener_onerror_TypeMismatch.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:37:48</start><end>2015-01-28 14:37:48</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileSystemManager_addStorageStateChangeListener_onerror_invalid_cb" purpose="Check if FileSystemManager::addStorageStateChangeListener() throws exception for wrong onerror" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileSystemManager_addStorageStateChangeListener_onerror_invalid_cb.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:37:48</start><end>2015-01-28 14:37:48</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileSystemManager_addStorageStateChangeListener_onsuccess_TypeMismatch" purpose="Check if FileSystemManager::addStorageStateChangeListener() throws exception for wrong type of onsuccess" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileSystemManager_addStorageStateChangeListener_onsuccess_TypeMismatch.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:37:48</start><end>2015-01-28 14:37:48</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileSystemManager_addStorageStateChangeListener_onsuccess_invalid_cb" purpose="Check if FileSystemManager::addStorageStateChangeListener() throws exception for wrong onsuccess" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileSystemManager_addStorageStateChangeListener_onsuccess_invalid_cb.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:37:48</start><end>2015-01-28 14:37:49</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileSystemManager_addStorageStateChangeListener_without_arguments" purpose="Check if FileSystemManager::addStorageStateChangeListener() throws exception for missing mandatory argument" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileSystemManager_addStorageStateChangeListener_without_arguments.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:37:49</start><end>2015-01-28 14:37:49</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileSystemManager_extend" purpose="Check if instance of FileSystemManager can be extended with new property" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileSystemManager_extend.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:37:49</start><end>2015-01-28 14:37:49</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileSystemManager_getStorage" purpose="Check if FileSystemManager::getStorage() calls onsuccess callback" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileSystemManager_getStorage.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:37:49</start><end>2015-01-28 14:37:50</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileSystemManager_getStorage_exist" purpose="Check if FileSystemManager::getStorage() method exists" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileSystemManager_getStorage_exist.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:37:50</start><end>2015-01-28 14:37:50</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileSystemManager_getStorage_missarg" purpose="Check if FileSystemManager::getStorage() throws exception for missing mandatory argument" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileSystemManager_getStorage_missarg.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:37:50</start><end>2015-01-28 14:37:50</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileSystemManager_getStorage_onerror_TypeMismatch" purpose="Check if FileSystemManager::getStorage() throws exception for wrong type of onerror" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileSystemManager_getStorage_onerror_TypeMismatch.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:37:50</start><end>2015-01-28 14:37:51</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileSystemManager_getStorage_onerror_invalid_cb" purpose="Check if FileSystemManager::getStorage() throws exception for wrong onerror" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileSystemManager_getStorage_onerror_invalid_cb.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:37:51</start><end>2015-01-28 14:37:51</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileSystemManager_getStorage_onsuccess_TypeMismatch" purpose="Check if FileSystemManager::getStorage() throws exception for wrong type of onsuccess" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileSystemManager_getStorage_onsuccess_TypeMismatch.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:37:51</start><end>2015-01-28 14:37:52</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileSystemManager_getStorage_onsuccess_invalid_cb" purpose="Check if FileSystemManager::getStorage() throws exception for wrong onsuccess" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileSystemManager_getStorage_onsuccess_invalid_cb.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:37:52</start><end>2015-01-28 14:37:53</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileSystemManager_getStorage_with_nonexist_label" purpose="Check if FileSystemManager::getStorage() throws an exception when storage with given label does not exist" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileSystemManager_getStorage_with_nonexist_label.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:37:53</start><end>2015-01-28 14:37:53</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileSystemManager_getStorage_with_onerror" purpose="Check if FileSystemManager::getStorage() can be called with onerror callback" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileSystemManager_getStorage_with_onerror.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:37:53</start><end>2015-01-28 14:37:54</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileSystemManager_in_tizen" purpose="Check if tizen namespace contains filesystem" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileSystemManager_in_tizen.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:37:54</start><end>2015-01-28 14:37:54</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileSystemManager_listStorages" purpose="Check if FileSystemManager::listStorages() method works" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileSystemManager_listStorages.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:37:54</start><end>2015-01-28 14:37:55</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileSystemManager_listStorages_exist" purpose="Check if FileSystemManager::listStorages() method exists" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileSystemManager_listStorages_exist.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:37:55</start><end>2015-01-28 14:37:55</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileSystemManager_listStorages_missarg" purpose="Check if FileSystemManager::listStorages() throws exception for missing mandatory argument" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileSystemManager_listStorages_missarg.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:37:55</start><end>2015-01-28 14:37:55</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileSystemManager_listStorages_onerror_TypeMismatch" purpose="Check if FileSystemManager::listStorages() method throws exception for wrong type of onerror" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileSystemManager_listStorages_onerror_TypeMismatch.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:37:55</start><end>2015-01-28 14:37:56</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileSystemManager_listStorages_onerror_invalid_cb" purpose="Check if FileSystemManager::listStorages() method throws exception for wrong onerror" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileSystemManager_listStorages_onerror_invalid_cb.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:37:56</start><end>2015-01-28 14:37:56</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileSystemManager_listStorages_onsuccess_TypeMismatch" purpose="Check if FileSystemManager::listStorages() method throws exception for wrong type of onsuccess" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileSystemManager_listStorages_onsuccess_TypeMismatch.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:37:56</start><end>2015-01-28 14:37:56</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileSystemManager_listStorages_onsuccess_invalid_cb" purpose="Check if FileSystemManager::listStorages() method throws exception for wrong onsuccess" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileSystemManager_listStorages_onsuccess_invalid_cb.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:37:56</start><end>2015-01-28 14:37:56</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileSystemManager_listStorages_storages_retrieve" purpose="Check if FileSystemManager::listStorages() method properly retrieves the available storages on the device" result="FAIL">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileSystemManager_listStorages_storages_retrieve.html</test_script_entry>
        </description>
      <result_info><actual_result>FAIL</actual_result><start>2015-01-28 14:37:56</start><end>2015-01-28 14:37:57</end><stdout>[Message] *FileSystemManager_listStorages_storages_retrieve: assert_true: includes 'wgt-package' expected true got false</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileSystemManager_listStorages_with_invalid_error_callbacks" purpose="Check if FileSystemManager::listStorages() method throws exception for wrong type of onerror (literals)" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileSystemManager_listStorages_with_invalid_error_callbacks.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:37:57</start><end>2015-01-28 14:37:57</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileSystemManager_listStorages_with_onerror" purpose="Check if FileSystemManager::listStorages() can be called with onerror argument" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileSystemManager_listStorages_with_onerror.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:37:57</start><end>2015-01-28 14:37:58</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileSystemManager_listStorages_without_arguments" purpose="Check if FileSystemManager::listStorages() method throws exception for missing mandatory argument" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileSystemManager_listStorages_without_arguments.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:37:58</start><end>2015-01-28 14:37:58</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileSystemManager_listStorages_works_correctly" purpose="Check if FileSystemManager::listStorages() method invokes onsuccess callback" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileSystemManager_listStorages_works_correctly.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:37:58</start><end>2015-01-28 14:37:59</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileSystemManager_maxPathLength_attribute" purpose="Check if FileSystemManager::maxPathLength attribute exists" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileSystemManager_maxPathLength_attribute.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:37:59</start><end>2015-01-28 14:37:59</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileSystemManager_notexist" purpose="Interface FileSystemManager should not be accessible" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileSystemManager_notexist.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:37:59</start><end>2015-01-28 14:37:59</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileSystemManager_removeStorageStateChangeListener_exist" purpose="Check if FileSystemManager::removeStorageStateChangeListener() method exists" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileSystemManager_removeStorageStateChangeListener_exist.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:37:59</start><end>2015-01-28 14:37:59</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileSystemManager_removeStorageStateChangeListener_with_para_invalid" purpose="Check if FileSystemManager::removeStorageStateChangeListener() method throws NotFoundError when given invalid watchId" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileSystemManager_removeStorageStateChangeListener_with_para_invalid.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:37:59</start><end>2015-01-28 14:37:59</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileSystemManager_removeStorageStateChangeListener_works_correctly" purpose="Check if FileSystemManager::removeStorageStateChangeListener() method can be called with valid watchId" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileSystemManager_removeStorageStateChangeListener_works_correctly.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:37:59</start><end>2015-01-28 14:38:00</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileSystemManager_resolve" purpose="Check if FileSystemManager::resolve() method can be called with only mandatory argument" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileSystemManager_resolve.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:38:00</start><end>2015-01-28 14:38:00</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileSystemManager_resolve_documents" purpose="Check if FileSystemManager::resolve() method works for Documents virtual root" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileSystemManager_resolve_documents.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:38:00</start><end>2015-01-28 14:38:01</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileSystemManager_resolve_downloads" purpose="Check if FileSystemManager::resolve() method works for Downloads virtual root" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileSystemManager_resolve_downloads.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:38:01</start><end>2015-01-28 14:38:02</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileSystemManager_resolve_error_invoked" purpose="Check if FileSystemManager::resolve() method reports NotFoundError by onerror for wrong value of location argument (absolute)" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileSystemManager_resolve_error_invoked.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:38:02</start><end>2015-01-28 14:38:02</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileSystemManager_resolve_exist" purpose="Check if FileSystemManager::resolve() method exists" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileSystemManager_resolve_exist.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:38:02</start><end>2015-01-28 14:38:03</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileSystemManager_resolve_images" purpose="Check if FileSystemManager::resolve() method works for Images virtual root" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileSystemManager_resolve_images.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:38:03</start><end>2015-01-28 14:38:03</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileSystemManager_resolve_missarg" purpose="Check if FileSystemManager::resolve() throws exception for missing mandatory argument" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileSystemManager_resolve_missarg.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:38:03</start><end>2015-01-28 14:38:03</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileSystemManager_resolve_mode_TypeMismatch" purpose="Check if FileSystemManager::resolve() method throws exception for wrong value of mode argument" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileSystemManager_resolve_mode_TypeMismatch.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:38:03</start><end>2015-01-28 14:38:04</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileSystemManager_resolve_mode_a" purpose="Check if FileSystemManager::resolve() method works for Documents virtual root and mode 'a'" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileSystemManager_resolve_mode_a.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:38:04</start><end>2015-01-28 14:38:04</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileSystemManager_resolve_mode_r" purpose="Check if FileSystemManager::resolve() method works for Documents virtual root and mode 'r'" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileSystemManager_resolve_mode_r.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:38:04</start><end>2015-01-28 14:38:05</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileSystemManager_resolve_mode_w" purpose="Check if FileSystemManager::resolve() method works for Documents virtual root and mode 'w'" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileSystemManager_resolve_mode_w.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:38:05</start><end>2015-01-28 14:38:06</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileSystemManager_resolve_music" purpose="Check if FileSystemManager::resolve() method works for Music virtual root" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileSystemManager_resolve_music.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:38:06</start><end>2015-01-28 14:38:06</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileSystemManager_resolve_onerror_TypeMismatch" purpose="Check if FileSystemManager::resolve() method throws exception for wrong type of onerror" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileSystemManager_resolve_onerror_TypeMismatch.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:38:06</start><end>2015-01-28 14:38:07</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileSystemManager_resolve_onerror_invalid_cb" purpose="Check if FileSystemManager::resolve() method throws exception for wrong onerror" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileSystemManager_resolve_onerror_invalid_cb.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:38:07</start><end>2015-01-28 14:38:07</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileSystemManager_resolve_onsuccess_TypeMismatch" purpose="Check if FileSystemManager::resolve() method throws exception for wrong type of onsuccess" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileSystemManager_resolve_onsuccess_TypeMismatch.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:38:07</start><end>2015-01-28 14:38:07</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileSystemManager_resolve_onsuccess_invalid_cb" purpose="Check if FileSystemManager::resolve() method throws exception for wrong onsuccess" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileSystemManager_resolve_onsuccess_invalid_cb.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:38:07</start><end>2015-01-28 14:38:07</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileSystemManager_resolve_ringtones" purpose="Check if FileSystemManager::resolve() method works for Ringtones virtual root" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileSystemManager_resolve_ringtones.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:38:07</start><end>2015-01-28 14:38:08</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileSystemManager_resolve_ringtones_invalid_mode_a" purpose="Check if FileSystemManager::resolve() method reports InvalidValuesError when resolving Ringtones directory with mode 'a'" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileSystemManager_resolve_ringtones_invalid_mode_a.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:38:08</start><end>2015-01-28 14:38:09</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileSystemManager_resolve_ringtones_invalid_mode_rw" purpose="Check if FileSystemManager::resolve() method reports InvalidValuesError when resolving Ringtones directory with mode 'rw'" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileSystemManager_resolve_ringtones_invalid_mode_rw.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:38:09</start><end>2015-01-28 14:38:09</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileSystemManager_resolve_ringtones_invalid_mode_w" purpose="Check if FileSystemManager::resolve() method reports InvalidValuesError when resolving Ringtones directory with mode 'w'" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileSystemManager_resolve_ringtones_invalid_mode_w.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:38:09</start><end>2015-01-28 14:38:10</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileSystemManager_resolve_videos" purpose="Check if FileSystemManager::resolve() method works for Videos virtual root" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileSystemManager_resolve_videos.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:38:10</start><end>2015-01-28 14:38:10</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileSystemManager_resolve_wgt-package_invalid_mode_a" purpose="Check if FileSystemManager::resolve() method reports InvalidValuesError when resolving 'wgt-package' directory with mode 'a'" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileSystemManager_resolve_wgt-package_invalid_mode_a.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:38:10</start><end>2015-01-28 14:38:11</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileSystemManager_resolve_wgt-package_invalid_mode_rw" purpose="Check if FileSystemManager::resolve() method reports InvalidValuesError when resolving 'wgt-package' directory with mode 'rw'" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileSystemManager_resolve_wgt-package_invalid_mode_rw.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:38:11</start><end>2015-01-28 14:38:12</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileSystemManager_resolve_wgt-package_invalid_mode_w" purpose="Check if FileSystemManager::resolve() method reports InvalidValuesError when resolving 'wgt-package' directory with mode 'w'" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileSystemManager_resolve_wgt-package_invalid_mode_w.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:38:12</start><end>2015-01-28 14:38:12</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileSystemManager_resolve_wgt_package" purpose="Check if FileSystemManager::resolve() method works for 'wgt-package' virtual root" result="FAIL">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileSystemManager_resolve_wgt_package.html</test_script_entry>
        </description>
      <result_info><actual_result>FAIL</actual_result><start>2015-01-28 14:38:12</start><end>2015-01-28 14:38:13</end><stdout>[Message] *FileSystemManager_resolve_wgt_package: assert_unreached: resolve() error callback invoked: name: NotFoundError, msg:  Reached unreachable code</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileSystemManager_resolve_wgt_private" purpose="Check if FileSystemManager::resolve() method works for 'wgt-private' virtual root" result="FAIL">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileSystemManager_resolve_wgt_private.html</test_script_entry>
        </description>
      <result_info><actual_result>FAIL</actual_result><start>2015-01-28 14:38:13</start><end>2015-01-28 14:38:14</end><stdout>[Message] *FileSystemManager_resolve_wgt_private: assert_unreached: resolve() error callback invoked: name:NotFoundErrormsg: Reached unreachable code</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileSystemManager_resolve_wgt_private_tmp" purpose="Check if FileSystemManager::resolve() method works for 'wgt-private-tmp' virtual root" result="FAIL">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileSystemManager_resolve_wgt_private_tmp.html</test_script_entry>
        </description>
      <result_info><actual_result>FAIL</actual_result><start>2015-01-28 14:38:14</start><end>2015-01-28 14:38:14</end><stdout>[Message] *FileSystemManager_resolve_wgt_private_tmp: assert_unreached: resolve() error callback invoked: name: NotFoundError, msg:  Reached unreachable code</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileSystemManager_resolve_with_mode" purpose="Check if FileSystemManager::resolve() method works for Images virtual root with mode 'rw'" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileSystemManager_resolve_with_mode.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:38:15</start><end>2015-01-28 14:38:15</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileSystemManager_resolve_with_onerror" purpose="Check if FileSystemManager::resolve() method can be called with onerror argument" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileSystemManager_resolve_with_onerror.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:38:15</start><end>2015-01-28 14:38:16</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileSystemManager_resolve_works_correctly" purpose="Check if FileSystemManager::resolve() method works for Documents and onsuccess is invoked with proper argument" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileSystemManager_resolve_works_correctly.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:38:16</start><end>2015-01-28 14:38:17</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileSystemStorageArraySuccessCallback_notexist" purpose="Interface FileSystemStorageArraySuccessCallback should not be accessible" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileSystemStorageArraySuccessCallback_notexist.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:38:17</start><end>2015-01-28 14:38:17</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileSystemStorageArraySuccessCallback_onsuccess" purpose="Test whether FileSystemStorageArraySuccessCallback::onsuccess is called with valid argument" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileSystemStorageArraySuccessCallback_onsuccess.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:38:17</start><end>2015-01-28 14:38:17</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileSystemStorageSuccessCallback_notexist" purpose="Interface FileSystemStorageSuccessCallback should not be accessible" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileSystemStorageSuccessCallback_notexist.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:38:17</start><end>2015-01-28 14:38:18</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileSystemStorageSuccessCallback_onsuccess" purpose="Test whether FileSystemStorageSuccessCallback::onsuccess is called with valid argument" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileSystemStorageSuccessCallback_onsuccess.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:38:18</start><end>2015-01-28 14:38:18</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileSystemStorage_extend" purpose="Check if instance of FileSystemStorage object can be extended with new attribute" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileSystemStorage_extend.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:38:18</start><end>2015-01-28 14:38:19</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileSystemStorage_label_attribute" purpose="Check if FileSystemStorage::label attribute exists, has type DOMString and is readonly" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileSystemStorage_label_attribute.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:38:19</start><end>2015-01-28 14:38:20</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileSystemStorage_notexist" purpose="Interface FileSystemStorage should not be accessible" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileSystemStorage_notexist.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:38:20</start><end>2015-01-28 14:38:20</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileSystemStorage_state_attribute" purpose="Check if FileSystemStorage::state attribute exists, has type FileSystemStorageState and is readonly" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileSystemStorage_state_attribute.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:38:20</start><end>2015-01-28 14:38:21</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileSystemStorage_type_attribute" purpose="Check if FileSystemStorage::type attribute exists, has type FileSystemStorageType and is readonly" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileSystemStorage_type_attribute.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:38:21</start><end>2015-01-28 14:38:21</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_copyTo" purpose="Check if File::copyTo() method ends successfully (copy file from documents/ to images/)" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_copyTo.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:38:21</start><end>2015-01-28 14:38:22</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_copyTo_dir_overwrite_false" purpose="Check if error callback is invoked when copy a directory to another location where directory of that name already exists (overwrite is false)" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_copyTo_dir_overwrite_false.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:38:22</start><end>2015-01-28 14:38:23</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_copyTo_dir_overwrite_true" purpose="Check if you can copy a directory to another location where directory of that name already exists (overwrite is true)" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_copyTo_dir_overwrite_true.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:38:23</start><end>2015-01-28 14:38:23</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_copyTo_dir_samedir_samename_overwrite_false" purpose="Check if error callback is invoked when copy directory dir1/subdir1 into dir1/ (overwrite is false)" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_copyTo_dir_samedir_samename_overwrite_false.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:38:23</start><end>2015-01-28 14:38:24</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_copyTo_dir_samedir_samename_overwrite_true" purpose="Check if error callback is invoked when copy directory dir1/subdir1 into dir1/ (overwrite is true)" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_copyTo_dir_samedir_samename_overwrite_true.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:38:24</start><end>2015-01-28 14:38:25</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_copyTo_exist" purpose="Check if File::copyTo() method exists" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_copyTo_exist.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:38:25</start><end>2015-01-28 14:38:25</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_copyTo_file_overwrite_false" purpose="Check if error callback is invoked when copy a file to another directory where a file of that name already exists (overwrite is false)" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_copyTo_file_overwrite_false.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:38:25</start><end>2015-01-28 14:38:26</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_copyTo_file_overwrite_true" purpose="Check if you can copy a file to another directory where a file of that name already exists (overwrite is true)" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_copyTo_file_overwrite_true.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:38:26</start><end>2015-01-28 14:38:26</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_copyTo_file_samedir_samename_overwrite_false" purpose="Check if error callback is invoked when copy a file to the same location (overwrite is false)" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_copyTo_file_samedir_samename_overwrite_false.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:38:27</start><end>2015-01-28 14:38:27</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_copyTo_file_samedir_samename_overwrite_true" purpose="Check if error callback is invoked when copy a file to the same location (overwrite is true)" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_copyTo_file_samedir_samename_overwrite_true.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:38:27</start><end>2015-01-28 14:38:28</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_copyTo_onerror_TypeMismatch" purpose="Check if File::copyTo() throws exception when type of errorCallback is wrong" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_copyTo_onerror_TypeMismatch.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:38:28</start><end>2015-01-28 14:38:28</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_copyTo_onerror_invalid_cb" purpose="Check if File::copyTo() throws exception for wrong errorCallback" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_copyTo_onerror_invalid_cb.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:38:28</start><end>2015-01-28 14:38:29</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_copyTo_onsuccess_TypeMismatch" purpose="Check if File::copyTo() throws exception when type of successCallback is wrong" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_copyTo_onsuccess_TypeMismatch.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:38:29</start><end>2015-01-28 14:38:30</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_copyTo_onsuccess_invalid_cb" purpose="Check if File::copyTo() throws exception for wrong successCallback" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_copyTo_onsuccess_invalid_cb.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:38:30</start><end>2015-01-28 14:38:31</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_copyTo_with_file_handle" purpose="Check if File::copyTo() calls errorCallback when called for object representing file, not a directory" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_copyTo_with_file_handle.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:38:31</start><end>2015-01-28 14:38:31</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_copyTo_with_null_success_and_error_callbacks" purpose="Check if File::copyTo() can be invoked with null successCallback and errorCallback" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_copyTo_with_null_success_and_error_callbacks.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:38:31</start><end>2015-01-28 14:38:32</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_copyTo_with_onerror" purpose="Check if File::copyTo() calls errorCallback (nonexisting originFilePath)" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_copyTo_with_onerror.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:38:32</start><end>2015-01-28 14:38:33</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_copyTo_with_onsuccess" purpose="Check if File::copyTo() with onSuccess creates a file copy" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_copyTo_with_onsuccess.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:38:33</start><end>2015-01-28 14:38:33</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_copyTo_writeFile_newName" purpose="Check if you can create a new empty file, write content into it, then request a copy of it (different name, same directory)" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_copyTo_writeFile_newName.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:38:33</start><end>2015-01-28 14:38:34</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_copyTo_writeFile_overwrite_false" purpose="Check if when create a new empty file, write content into it, then request a copy of it over existing file invokes errorCallback (overwrite=false)" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_copyTo_writeFile_overwrite_false.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:38:34</start><end>2015-01-28 14:38:35</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_copyTo_writeFile_subdir" purpose="Check if you can create a new empty file, write content into it, then request a copy of it (different name, different directory)" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_copyTo_writeFile_subdir.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:38:35</start><end>2015-01-28 14:38:35</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_createDirectory" purpose="Check if File::createDirectory() method" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_createDirectory.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:38:35</start><end>2015-01-28 14:38:36</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_createDirectory_exist" purpose="Check if File::createDirectory() method exists" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_createDirectory_exist.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:38:36</start><end>2015-01-28 14:38:37</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_createDirectory_level2" purpose="Check if File::createDirectory() works for non-existing intermediate directory (creates 2 levels of directories)" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_createDirectory_level2.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:38:37</start><end>2015-01-28 14:38:37</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_createFile" purpose="Check if File::createFile() method works properly" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_createFile.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:38:37</start><end>2015-01-28 14:38:38</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_createFile_exist" purpose="Check if File::createFile() method exists" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_createFile_exist.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:38:38</start><end>2015-01-28 14:38:39</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_createFile_existing_file" purpose="Check if File::createFile() throws exception when the file already exists" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_createFile_existing_file.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:38:39</start><end>2015-01-28 14:38:39</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_created_attribute" purpose="Check if File::created attribute exists, has type Date and is readonly" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_created_attribute.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:38:39</start><end>2015-01-28 14:38:40</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_deleteDirectory" purpose="Check if File::deleteDirectory() method can be called" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_deleteDirectory.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:38:40</start><end>2015-01-28 14:38:41</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_deleteDirectory_createDir_documents" purpose="Check if File::createDirectory() creates a new directory in Documents and File::deleteDirectory() removes it" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_deleteDirectory_createDir_documents.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:38:41</start><end>2015-01-28 14:38:41</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_deleteDirectory_createDir_downloads" purpose="Check if File::createDirectory() creates a new directory in Downloads and File::deleteDirectory() removes it" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_deleteDirectory_createDir_downloads.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:38:41</start><end>2015-01-28 14:38:42</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_deleteDirectory_createDir_images" purpose="Check if File::createDirectory() creates a new directory in Images and File::deleteDirectory() removes it" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_deleteDirectory_createDir_images.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:38:42</start><end>2015-01-28 14:38:43</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_deleteDirectory_createDir_music" purpose="Check if File::createDirectory() creates a new directory in Music and File::deleteDirectory() removes it" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_deleteDirectory_createDir_music.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:38:43</start><end>2015-01-28 14:38:43</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_deleteDirectory_createDir_videos" purpose="Check if File::createDirectory() creates a new directory in Videos and File::deleteDirectory() removes it" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_deleteDirectory_createDir_videos.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:38:43</start><end>2015-01-28 14:38:44</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_deleteDirectory_exist" purpose="Check if File::deleteDirectory() method exists" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_deleteDirectory_exist.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:38:44</start><end>2015-01-28 14:38:45</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_deleteDirectory_onerror_TypeMismatch" purpose="Check if File::deleteDirectory() throws exception for wrong type of onerror" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_deleteDirectory_onerror_TypeMismatch.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:38:45</start><end>2015-01-28 14:38:45</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_deleteDirectory_onerror_invalid_cb" purpose="Check if File::deleteDirectory() throws exception for wrong onerror" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_deleteDirectory_onerror_invalid_cb.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:38:45</start><end>2015-01-28 14:38:46</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_deleteDirectory_onsuccess_TypeMismatch" purpose="Check if File::deleteDirectory() throws exception for wrong type of onsuccess" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_deleteDirectory_onsuccess_TypeMismatch.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:38:46</start><end>2015-01-28 14:38:47</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_deleteDirectory_onsuccess_invalid_cb" purpose="Check if File::deleteDirectory() throws exception for wrong onsuccess" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_deleteDirectory_onsuccess_invalid_cb.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:38:47</start><end>2015-01-28 14:38:48</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_deleteDirectory_with_empty_path" purpose="Check if File::deleteDirectory() calls errorCallback when given directoryPath is empty" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_deleteDirectory_with_empty_path.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:38:48</start><end>2015-01-28 14:38:48</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_deleteDirectory_with_file_handle" purpose="Check if File::deleteDirectory() calls errorCallback when called on File object representing file, not a directory" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_deleteDirectory_with_file_handle.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:38:48</start><end>2015-01-28 14:38:49</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_deleteDirectory_with_null_callbacks" purpose="Check if File::deleteDirectory() method can be called with null onsuccess and onerror" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_deleteDirectory_with_null_callbacks.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:38:49</start><end>2015-01-28 14:38:50</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_deleteDirectory_with_onerror" purpose="Check if File::deleteDirectory() method calls onerror properly (when removing non-existing directory)" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_deleteDirectory_with_onerror.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:38:50</start><end>2015-01-28 14:38:50</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_deleteDirectory_with_onsuccess" purpose="Check if File::deleteDirectory() method with onsuccess optional argument works properly" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_deleteDirectory_with_onsuccess.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:38:50</start><end>2015-01-28 14:38:51</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_deleteFile" purpose="Check if File::deleteFile() method works properly" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_deleteFile.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:38:51</start><end>2015-01-28 14:38:52</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_deleteFile_copyFile_downloads" purpose="Check if you can create a new file in Document, copy it into Downloads, then request removing it" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_deleteFile_copyFile_downloads.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:38:52</start><end>2015-01-28 14:38:52</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_deleteFile_copyFile_images" purpose="Check if you can create a new file in Images, copy it into Downloads, then request removing it" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_deleteFile_copyFile_images.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:38:52</start><end>2015-01-28 14:38:53</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_deleteFile_copyFile_music" purpose="Check if you can create a new file in Music, copy it into Downloads, then request removing it" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_deleteFile_copyFile_music.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:38:53</start><end>2015-01-28 14:38:54</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_deleteFile_copyFile_videos" purpose="Check if you can create a new file in Video, copy it into Downloads, then request removing it" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_deleteFile_copyFile_videos.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:38:54</start><end>2015-01-28 14:38:54</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_deleteFile_createFile" purpose="Check if you can create a new file in Documents, copy it into Downloads, then request removing it" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_deleteFile_createFile.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:38:54</start><end>2015-01-28 14:38:55</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_deleteFile_exist" purpose="Check if File::deleteFile() method exists" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_deleteFile_exist.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:38:55</start><end>2015-01-28 14:38:56</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_deleteFile_listDocumentsFiles" purpose="Check if you can create directories and file in Documents, list them, then request deleting the directory and the file" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_deleteFile_listDocumentsFiles.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:38:56</start><end>2015-01-28 14:38:56</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_deleteFile_listDownloadsFiles" purpose="Check if you can create directories and file in Downloads, list them, then request deleting the directory and the file" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_deleteFile_listDownloadsFiles.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:38:56</start><end>2015-01-28 14:38:57</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_deleteFile_listImagsFiles" purpose="Check if you can create directories and file in Images, list them, then request deleting the directory and the file" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_deleteFile_listImagsFiles.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:38:57</start><end>2015-01-28 14:38:58</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_deleteFile_listMusicFiles" purpose="Check if you can create directories and file in Music, list them, then request deleting the directory and the file" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_deleteFile_listMusicFiles.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:38:58</start><end>2015-01-28 14:38:58</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_deleteFile_listVideosfiles" purpose="Check if you can create directories and file in Videos, list them, then request deleting the directory and the file" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_deleteFile_listVideosfiles.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:38:58</start><end>2015-01-28 14:38:59</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_deleteFile_onerror_TypeMismatch" purpose="Check if File::deleteFile() throws exception for wrong type of onerror" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_deleteFile_onerror_TypeMismatch.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:38:59</start><end>2015-01-28 14:39:00</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_deleteFile_onerror_invalid_cb" purpose="Check if File::deleteFile() throws exception for wrong onerror" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_deleteFile_onerror_invalid_cb.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:39:00</start><end>2015-01-28 14:39:00</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_deleteFile_onsuccess_TypeMismatch" purpose="Check if File::deleteFile() throws exception for wrong type of onsuccess" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_deleteFile_onsuccess_TypeMismatch.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:39:01</start><end>2015-01-28 14:39:01</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_deleteFile_onsuccess_invalid_cb" purpose="Check if File::deleteFile() throws exception for wrong onsuccess" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_deleteFile_onsuccess_invalid_cb.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:39:01</start><end>2015-01-28 14:39:02</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_deleteFile_with_dir_handle" purpose="Check if File::deleteFile() calls errorCallback when called on File object representing file, not a directory" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_deleteFile_with_dir_handle.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:39:02</start><end>2015-01-28 14:39:02</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_deleteFile_with_nonexist" purpose="Check if File::deleteFile() calls errorCallback when given filePath does not exist" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_deleteFile_with_nonexist.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:39:03</start><end>2015-01-28 14:39:03</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_deleteFile_with_onerror" purpose="Check if File::deleteFile() method calls errorCallback properly (when removing non-existing file)" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_deleteFile_with_onerror.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:39:03</start><end>2015-01-28 14:39:04</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_deleteFile_with_onsuccess" purpose="Check if File::deleteFile() method calls given onsuccess callback" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_deleteFile_with_onsuccess.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:39:04</start><end>2015-01-28 14:39:05</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_deleteFile_with_vaild_callbacks" purpose="Check if File::deleteFile() can be called with onsuccess and onerror" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_deleteFile_with_vaild_callbacks.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:39:05</start><end>2015-01-28 14:39:05</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_deleteFile_with_valid_filePath" purpose="Check if File::deleteFile() method can be called without onsuccess" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_deleteFile_with_valid_filePath.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:39:05</start><end>2015-01-28 14:39:06</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_extend" purpose="Check if instance of File can be extended with new property" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_extend.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:39:06</start><end>2015-01-28 14:39:07</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_fileSize_attribute" purpose="Check if File::fileSize attribute exists, has type Number and is readonly" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_fileSize_attribute.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:39:07</start><end>2015-01-28 14:39:07</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_fullPath_attribute" purpose="Check if File::fullPath attribute exists, has type DOMString and is readonly" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_fullPath_attribute.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:39:07</start><end>2015-01-28 14:39:08</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_isDirectory_attribute" purpose="Check if File::isDirectory attribute exists, has type Boolean and is readonly" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_isDirectory_attribute.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:39:08</start><end>2015-01-28 14:39:09</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_isFile_attribute" purpose="Check if File::isFile attribute exists, has type Boolean and is readonly" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_isFile_attribute.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:39:09</start><end>2015-01-28 14:39:09</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_length_attribute" purpose="Check if File::length attribute exists, has type Number and is readonly" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_length_attribute.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:39:09</start><end>2015-01-28 14:39:10</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_listFiles" purpose="Check if File::listFiles() method works properly" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_listFiles.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:39:10</start><end>2015-01-28 14:39:11</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_listFiles_createFiles" purpose="Check if you can create a new directory and then list files in this directory" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_listFiles_createFiles.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:39:11</start><end>2015-01-28 14:39:11</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_listFiles_exist" purpose="Check if File::listFiles() method exists" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_listFiles_exist.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:39:11</start><end>2015-01-28 14:39:12</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_listFiles_filter_TypeMismatch" purpose="Check if File::listFiles() method throws exception for wrong type of filter" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_listFiles_filter_TypeMismatch.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:39:12</start><end>2015-01-28 14:39:13</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_listFiles_filter_empty" purpose="Check if File::listFiles() can be called with empty object as filter argument" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_listFiles_filter_empty.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:39:13</start><end>2015-01-28 14:39:13</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_listFiles_missarg" purpose="Check if File::listFiles() with missing mandatory argument throws exception" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_listFiles_missarg.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:39:13</start><end>2015-01-28 14:39:14</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_listFiles_onerror_TypeMismatch" purpose="Check if File::listFiles() throws exception for wrong type of onerror" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_listFiles_onerror_TypeMismatch.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:39:14</start><end>2015-01-28 14:39:15</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_listFiles_onerror_invalid_cb" purpose="Check if File::listFiles() throws exception for wrong onerror" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_listFiles_onerror_invalid_cb.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:39:15</start><end>2015-01-28 14:39:15</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_listFiles_onsuccess_TypeMismatch" purpose="Check if File::listFiles() throws exception for wrong type of onsuccess" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_listFiles_onsuccess_TypeMismatch.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:39:16</start><end>2015-01-28 14:39:16</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_listFiles_onsuccess_invalid_cb" purpose="Check if File::listFiles() throws exception for wrong onsuccess" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_listFiles_onsuccess_invalid_cb.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:39:16</start><end>2015-01-28 14:39:17</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_listFiles_with_file_handle" purpose="Check if File::listFiles() calls errorCallback when called on File object representing file, not a directory" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_listFiles_with_file_handle.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:39:17</start><end>2015-01-28 14:39:17</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_listFiles_with_filter" purpose="Check if File::listFiles() works with filter argument" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_listFiles_with_filter.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:39:18</start><end>2015-01-28 14:39:18</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_listFiles_with_onerror" purpose="Check if File::listFiles() calls errorCallback (listing files of a file)" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_listFiles_with_onerror.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:39:18</start><end>2015-01-28 14:39:19</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_listFiles_with_valid_successCallback" purpose="Check if File::listFiles() call onsuccess callback" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_listFiles_with_valid_successCallback.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:39:19</start><end>2015-01-28 14:39:20</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_modified_attribute" purpose="Check if File::modified attribute exists, has type Date and is readonly" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_modified_attribute.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:39:20</start><end>2015-01-28 14:39:20</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_moveTo" purpose="Check if File::moveTo() can be called successfully" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_moveTo.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:39:20</start><end>2015-01-28 14:39:21</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_moveTo_dir_samedir_samename_overwrite_false" purpose="Check if File::moveTo() invokes error callback when moving a directory to the same location with the same name (overwrite is false)" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_moveTo_dir_samedir_samename_overwrite_false.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:39:21</start><end>2015-01-28 14:39:22</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_moveTo_dir_samedir_samename_overwrite_true" purpose="Check if File::moveTo() invokes error callback when moving a directory to the same location with the same name (overwrite is true)" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_moveTo_dir_samedir_samename_overwrite_true.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:39:22</start><end>2015-01-28 14:39:22</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_moveTo_empty_destination_source_and_destination_paths" purpose="Check if File::moveTo() invokes error callback when originFilePath and destinationFilePath are empty" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_moveTo_empty_destination_source_and_destination_paths.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:39:22</start><end>2015-01-28 14:39:23</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_moveTo_exist" purpose="Check if File::moveTo() method exists" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_moveTo_exist.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:39:23</start><end>2015-01-28 14:39:24</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_moveTo_file_samedir_samename_overwrite_false" purpose="Check if File::moveTo() invokes error callback when moving a file to the same location with the same name (overwrite is false)" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_moveTo_file_samedir_samename_overwrite_false.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:39:24</start><end>2015-01-28 14:39:24</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_moveTo_file_samedir_samename_overwrite_true" purpose="Check if File::moveTo() error callback when moving a file to the same location with the same name (overwrite is true)" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_moveTo_file_samedir_samename_overwrite_true.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:39:24</start><end>2015-01-28 14:39:25</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_moveTo_onerror_TypeMismatch" purpose="Check if File::moveTo() throws exception for wrong type of onerror" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_moveTo_onerror_TypeMismatch.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:39:25</start><end>2015-01-28 14:39:26</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_moveTo_onerror_invalid_cb" purpose="Check if File::moveTo() throws exception for wrong onerror" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_moveTo_onerror_invalid_cb.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:39:26</start><end>2015-01-28 14:39:26</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_moveTo_onsuccess_TypeMismatch" purpose="Check if File::moveTo() throws exception for wrong type of onsuccess" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_moveTo_onsuccess_TypeMismatch.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:39:26</start><end>2015-01-28 14:39:27</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_moveTo_onsuccess_invalid_cb" purpose="Check if File::moveTo() throws exception for wrong onsuccess" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_moveTo_onsuccess_invalid_cb.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:39:27</start><end>2015-01-28 14:39:28</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_moveTo_with_additional_null_parameter" purpose="Check if File::moveTo() method can be invoked with extra null parameter" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_moveTo_with_additional_null_parameter.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:39:28</start><end>2015-01-28 14:39:28</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_moveTo_with_file_handle" purpose="Check if File::moveTo() calls errorCallback when called on File object representing file, not a directory" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_moveTo_with_file_handle.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:39:28</start><end>2015-01-28 14:39:29</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_moveTo_with_onerror" purpose="Check if File::moveTo() calls errorCallback (source file does not exist)" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_moveTo_with_onerror.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:39:29</start><end>2015-01-28 14:39:30</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_moveTo_with_onsuccess" purpose="Check if File::moveTo() calls successCallback" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_moveTo_with_onsuccess.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:39:30</start><end>2015-01-28 14:39:30</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_moveTo_with_path_invalid" purpose="Check if File::moveTo() calls errorCallback (NotFound) when destinationFilePath is in non-existing directory" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_moveTo_with_path_invalid.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:39:30</start><end>2015-01-28 14:39:31</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_moveTo_writeFile_newName" purpose="Check if you can create a new file, write content to it, and then move the file to the same directory with different file name" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_moveTo_writeFile_newName.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:39:31</start><end>2015-01-28 14:39:32</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_moveTo_writeFile_overwrite_false" purpose="Check if File::moveTo() calls errorCallback when originFilePath and destinationFilePath is the same path (overwrite false)" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_moveTo_writeFile_overwrite_false.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:39:32</start><end>2015-01-28 14:39:32</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_moveTo_writeFile_subdir" purpose="Check if you can create a new file, write content to it, and then move the file to a subdirectory keeping the name of the file" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_moveTo_writeFile_subdir.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:39:32</start><end>2015-01-28 14:39:33</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_name_attribute" purpose="Check if File::name attribute exists, has type DOMString and is readonly" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_name_attribute.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:39:33</start><end>2015-01-28 14:39:34</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_notexist" purpose="Interface File should not be accessible" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_notexist.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:39:34</start><end>2015-01-28 14:39:34</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_openStream" purpose="Check if File::openStream() method works properly" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_openStream.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:39:34</start><end>2015-01-28 14:39:35</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_openStream_encoding_invalid" purpose="Check if File::openStream() throws an exception for invalid encoding value" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_openStream_encoding_invalid.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:39:35</start><end>2015-01-28 14:39:35</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_openStream_exist" purpose="Check if File::openStream() method exists" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_openStream_exist.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:39:35</start><end>2015-01-28 14:39:36</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_openStream_missarg" purpose="Check if File::openStream() method throws exception for missing mandatory argument" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_openStream_missarg.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:39:36</start><end>2015-01-28 14:39:37</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_openStream_mode_TypeMismatch" purpose="Check if File::openStream() throws exception for wrong type of mode argument" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_openStream_mode_TypeMismatch.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:39:37</start><end>2015-01-28 14:39:37</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_openStream_mode_a" purpose="Check if File::openStream() works for mode a" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_openStream_mode_a.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:39:37</start><end>2015-01-28 14:39:38</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_openStream_mode_r" purpose="Check if File::openStream() works for mode r" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_openStream_mode_r.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:39:38</start><end>2015-01-28 14:39:39</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_openStream_mode_rw" purpose="Check if File::openStream() works for mode rw" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_openStream_mode_rw.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:39:39</start><end>2015-01-28 14:39:39</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_openStream_mode_w" purpose="Check if File::openStream() works for mode w" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_openStream_mode_w.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:39:39</start><end>2015-01-28 14:39:40</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_openStream_onerror_TypeMismatch" purpose="Check if File::openStream() method throws exception for wrong type of onerror" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_openStream_onerror_TypeMismatch.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:39:40</start><end>2015-01-28 14:39:41</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_openStream_onerror_invalid_cb" purpose="Check if File::openStream() method throws exception for wrong onerror" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_openStream_onerror_invalid_cb.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:39:41</start><end>2015-01-28 14:39:41</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_openStream_onsuccess_TypeMismatch" purpose="Check if File::openStream() method throws exception for wrong type of onsuccess" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_openStream_onsuccess_TypeMismatch.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:39:41</start><end>2015-01-28 14:39:42</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_openStream_onsuccess_invalid_cb" purpose="Check if File::openStream() method throws exception for wrong onsuccess" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_openStream_onsuccess_invalid_cb.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:39:42</start><end>2015-01-28 14:39:43</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_openStream_with_encoding" purpose="Check if File::openStream() method can be called with valid encoding argument" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_openStream_with_encoding.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:39:43</start><end>2015-01-28 14:39:43</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_openStream_with_nonexist_file" purpose="Check if File::openStream() method calls errorCallback when invoked for file which was already removed" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_openStream_with_nonexist_file.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:39:43</start><end>2015-01-28 14:39:44</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_openStream_with_onerror" purpose="Check if File::openStream() method calls errorCallback properly (openStream used on directory)" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_openStream_with_onerror.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:39:44</start><end>2015-01-28 14:39:45</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_parent_attribute" purpose="Check if File::parent attribute exists, has type File and is readonly" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_parent_attribute.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:39:45</start><end>2015-01-28 14:39:45</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_parent_attribute_notnull_using_resolve" purpose="Check if File::parent attribute is set by resolve() for subdirectory of Documents" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_parent_attribute_notnull_using_resolve.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:39:45</start><end>2015-01-28 14:39:46</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_path_attribute" purpose="Check if File::path attribute exists, has type DOMString and is readonly" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_path_attribute.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:39:46</start><end>2015-01-28 14:39:47</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_readAsText" purpose="Check if File::readAsText() method works properly without errorCallback" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_readAsText.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:39:47</start><end>2015-01-28 14:39:47</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_readAsText_encoding_invalid" purpose="Check if File::readAsText() method throws exception for invalid encoding value" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_readAsText_encoding_invalid.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:39:47</start><end>2015-01-28 14:39:48</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_readAsText_exist" purpose="Check if File::readAsText() method exists" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_readAsText_exist.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:39:48</start><end>2015-01-28 14:39:49</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_readAsText_listDocumentsFiles" purpose="Check if File::readAsText() method works for a file created in Documents" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_readAsText_listDocumentsFiles.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:39:49</start><end>2015-01-28 14:39:49</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_readAsText_listDownloadsFiles" purpose="Check if File::readAsText() method works for a file created in Downloads" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_readAsText_listDownloadsFiles.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:39:49</start><end>2015-01-28 14:39:50</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_readAsText_listImagesFiles" purpose="Check if File::readAsText() method works for a file created in Images" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_readAsText_listImagesFiles.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:39:50</start><end>2015-01-28 14:39:51</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_readAsText_listMusicFiles" purpose="Check if File::readAsText() method works for a file created in Music" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_readAsText_listMusicFiles.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:39:51</start><end>2015-01-28 14:39:51</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_readAsText_listVideosFiles" purpose="Check if File::readAsText() method works for a file created in Videos" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_readAsText_listVideosFiles.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:39:51</start><end>2015-01-28 14:39:52</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_readAsText_missarg" purpose="Check if File::readAsText() throws exception for missing mandatory parameter" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_readAsText_missarg.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:39:52</start><end>2015-01-28 14:39:53</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_readAsText_onerror_TypeMismatch" purpose="Check if File::readAsText() method throws exception for wrong type of onerror" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_readAsText_onerror_TypeMismatch.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:39:53</start><end>2015-01-28 14:39:53</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_readAsText_onerror_invalid_cb" purpose="Check if File::readAsText() method throws exception for wrong onerror" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_readAsText_onerror_invalid_cb.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:39:53</start><end>2015-01-28 14:39:54</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_readAsText_onsuccess_TypeMismatch" purpose="Check if File::readAsText() method throws exception for wrong type of onsuccess" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_readAsText_onsuccess_TypeMismatch.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:39:54</start><end>2015-01-28 14:39:55</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_readAsText_onsuccess_invalid_cb" purpose="Check if File::readAsText() method throws exception for wrong onsuccess" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_readAsText_onsuccess_invalid_cb.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:39:55</start><end>2015-01-28 14:39:55</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_readAsText_with_encoding" purpose="Check if File::readAsText() method works with encoding argument" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_readAsText_with_encoding.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:39:55</start><end>2015-01-28 14:39:56</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_readAsText_with_onerror" purpose="Check if File::readAsText() properly calls errorCallback (called on a directory instead of file)" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_readAsText_with_onerror.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:39:56</start><end>2015-01-28 14:39:57</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_readOnly_attribute" purpose="Check if File::readOnly attribute exists, has type Boolean and is readonly" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_readOnly_attribute.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:39:57</start><end>2015-01-28 14:39:57</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_resolve" purpose="Check if File::resolve() method works properly" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_resolve.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:39:57</start><end>2015-01-28 14:39:58</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_resolve_exist" purpose="Check if File::resolve() method exists" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_resolve_exist.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:39:58</start><end>2015-01-28 14:39:59</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_resolve_with_nonexist" purpose="Check if File::resolve() throws exception when resolving a file which not exist" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_resolve_with_nonexist.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:39:59</start><end>2015-01-28 14:39:59</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_toURI" purpose="Check if File::toURI() method works properly" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_toURI.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:39:59</start><end>2015-01-28 14:40:00</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_toURI_exist" purpose="Check if File::toURI() method exists" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_toURI_exist.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:40:00</start><end>2015-01-28 14:40:01</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_toURI_extra_argument" purpose="Check if File::toURI() method accepts extra argument" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_toURI_extra_argument.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:40:01</start><end>2015-01-28 14:40:01</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="File_toURI_with_nonexist_file" purpose="Check if File::toURI() method throws exception when get a URI of non-existing file" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/File_toURI_with_nonexist_file.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:40:01</start><end>2015-01-28 14:40:02</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="filesystem_FileStreamSuccessCallback_onsuccess" purpose="Test whether FileStreamSuccessCallback::onsuccess is called with valid argument" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/filesystem_FileStreamSuccessCallback_onsuccess.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:40:02</start><end>2015-01-28 14:40:03</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="filesystem_File_copyTo" purpose="Check if File::copyTo() can be called" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/filesystem_File_copyTo.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:40:03</start><end>2015-01-28 14:40:03</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="filesystem_File_readAsText" purpose="Check if File::readAsText() method reads the content of a file as a DOMString" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/filesystem_File_readAsText.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:40:03</start><end>2015-01-28 14:40:04</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="filesystem_File_resolve" purpose="Check if File::resolve() method called for a file returns a file handle" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/filesystem_File_resolve.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:40:04</start><end>2015-01-28 14:40:05</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
      <testcase component="Tizen Device APIs/IO/Filesystem" execution_type="auto" id="FileSystemManager_resolve_mode_null" purpose="Check if the value of mode is 'rw' if it is set to null" result="PASS">
        <description>
          <test_script_entry>/opt/tct-filesystem-tizen-tests/filesystem/FileSystemManager_resolve_mode_null.html</test_script_entry>
        </description>
      <result_info><actual_result>PASS</actual_result><start>2015-01-28 14:40:05</start><end>2015-01-28 14:40:05</end><stdout>[Message]</stdout><stderr /></result_info></testcase>
    </set>
  </suite>
</test_definition>
